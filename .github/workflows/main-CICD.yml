name: Java CICD gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    services:
      mysql: # test 용
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 1234 
          MYSQL_DATABASE: dabjeongneo
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h mysql"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=3

      redis: # test 용
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Check directory structure
        run: ls -R  # 디렉토리 구조 확인

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Check for Gradle Wrapper
        run: ls -l dabjeongneo/gradlew  # gradlew 존재 여부 확인

      - name: Grant execute permission for gradlew
        run: chmod +x dabjeongneo/gradlew  # gradlew 실행 권한 부여

      - name: Build with Gradle Wrapper
        working-directory: dabjeongneo  # Gradle 빌드 디렉토리 설정
        run: ./gradlew build

      - name: Docker login
        uses: docker/login-action@v3 
        with: 
          username: ${{ secrets.DOCKER_HUB_USERNAME }} 
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and Push Docker images
        working-directory: dabjeongneo
        run: |
          docker build -f Dockerfile -t ${{ secrets.DOCKER_HUB_REPO }} .
          docker push ${{ secrets.DOCKER_HUB_REPO }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions: 
      write-all

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          port: 22
          key: ${{ secrets.PEM_KEY }}
          envs: GITHUB_SHA
          script: |

            # Docker & Docker Compose 설치 확인 및 설치
            if ! command -v docker &> /dev/null
            then
              echo "Docker를 설치합니다..."
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl enable docker
              sudo systemctl start docker
            else
              echo "Docker가 이미 설치됨"
            fi

            if ! command -v docker-compose &> /dev/null
            then
              echo "Docker Compose를 설치합니다..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            else
              echo "Docker Compose가 이미 설치됨"
            fi

            # Docker 비상호작용 로그인 처리
            echo ${{ secrets.DOCKER_HUB_PASSWORD }} | sudo docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

            # docker-compose.yml 파일 확인
            if [ ! -f docker-compose.yml ]; then
              echo "docker-compose.yml 파일이 없습니다. 파일을 확인하세요."
              exit 1
            fi

            # 기존 컨테이너 제거 (컨테이너가 있을 경우에만)
            if [ "$(docker ps -a -q)" ]; then
              sudo docker rm $(docker ps -a -q)
            else
              echo "삭제할 컨테이너가 없습니다."
            fi

            # 기존 이미지 제거 (이미지가 있을 경우에만)
            if [ "$(docker images -q)" ]; then
              sudo docker rmi $(docker images -q)
            else
              echo "삭제할 이미지가 없습니다."
            fi

        
            
            echo "COMPOSE 경로: ./dabjeongnoe/docker-compose.yml"

            working-directory: ./dabjeongneo
            # Docker Compose 실행
            sudo docker-compose -f ./dabjeongneo/docker-compose.yml up -d

