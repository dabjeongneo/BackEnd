name: Java CICD gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    services:
      mysql: # test 용
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 1234 
          MYSQL_DATABASE: dabjeongneo
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h mysql"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=3

      redis: # test 용
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Check directory structure
      run: ls -R  # 디렉토리 구조 확인

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Check for Gradle Wrapper
      run: ls -l dabjeongneo/gradlew  # gradlew 존재 여부 확인

    - name: Grant execute permission for gradlew
      run: chmod +x dabjeongneo/gradlew  # gradlew 실행 권한 부여

    - name: Build with Gradle Wrapper
      working-directory: dabjeongneo  # Gradle 빌드 디렉토리 설정
      run: ./gradlew build


    - name: Docker login
      uses: docker/login-action@v3 
      with: 
        username: ${{ secrets.DOCKER_HUB_USERNAME }} 
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Build and Push Docker images
      working-directory: dabjeongneo
      run: |
        docker build -f Dockerfile -t ${{ secrets.DOCKER_HUB_REPO }} .
        docker push ${{ secrets.DOCKER_HUB_REPO }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions: 
      write-all
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master #appleboy/ssh-action@master 이것을 사용하여 지정한 서버에 ssh 로 접속후 script 실행
        env:
          COMPOSE: ${{ secrets.DOCKER_COMPOSE }} 
        with:
          host: ${{ secrets.HOST }} # 호스트 ip (ec2 사용시 퍼블릭 ipv4 ip)
          username: ubuntu
          port: 22
          key: ${{ secrets.PEM_KEY }}
          envs: GITHUB_SHA
          script: |
            # 도커 로그인
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        
            # docker-compose.yml 파일 생성 (COMPOSE 환경 변수를 사용)
            echo "$COMPOSE" > docker-compose.yml
        
            # 기존 도커 컨테이너 및 이미지를 내려놓고 제거
            sudo docker-compose down
            sudo docker rm $(sudo docker ps -a -q)
            sudo docker rmi $(sudo docker images -q)
